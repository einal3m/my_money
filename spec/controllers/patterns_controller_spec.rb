require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe PatternsController, :type => :controller do

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # PatternsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all patterns for specified account as @patterns" do
      pattern = FactoryGirl.create(:pattern)
      get :index, {account_id: pattern.account.id}, valid_session
      expect(assigns(:patterns)).to eq([pattern])
    end

    it "assigns current account to @account" do
      pattern = FactoryGirl.create(:pattern)
      get :index, {account_id: pattern.account.id}, valid_session
      expect(assigns(:account)).to eq(pattern.account)
    end

    it "displays no patterns if account not selected and not in session" do
      pattern = FactoryGirl.create(:pattern)
      session.delete(:account_id)
      get :index, {}, valid_session
      expect(assigns(:patterns)).to eq([])
    end

    it "displays patterns of account in session by default" do
      pattern = FactoryGirl.create(:pattern)
      session[:account_id] = pattern.account.id
      get :index, {}, valid_session
      expect(assigns(:patterns)).to eq([pattern])  
    end

    it "renders the :index view" do
      get :index, {}, valid_session
      expect(response).to render_template(:index)
    end

  end

  describe "GET show" do
    it "redirects to the patterns index page" do
      pattern = FactoryGirl.create(:pattern)
      get :show, {id: pattern.id}, valid_session
      expect(response).to redirect_to(patterns_url)
    end
  end

  describe "GET new" do
    it "assigns a new pattern as @pattern" do
      account = FactoryGirl.create(:account)
      get :new, {account_id: account.id}, valid_session
      expect(assigns(:pattern)).to be_a_new(Pattern)
    end

    it "assigns the current account to the pattern" do
      account = FactoryGirl.create(:account)
      get :new, {account_id: account.id}, valid_session
      expect(assigns(:pattern).account).to eq(account)
    end

    it "assigns lists for categories and subcategories" do
      account = FactoryGirl.create(:account)
      category = FactoryGirl.create(:category)
      get :new, {account_id: account.id}, valid_session
      expect(assigns(:categories)).to eq([category])
      expect(assigns(:subcategories)).to eq([])
    end

    it "renders the :new view" do
      account = FactoryGirl.create(:account)
      get :new, {account_id: account.id}, valid_session
      expect(response).to render_template(:new)
    end
  end

  describe "GET edit" do
    it "assigns the requested pattern as @pattern" do
      pattern = FactoryGirl.create(:pattern)
      get :edit, {:id => pattern.to_param}, valid_session
      expect(assigns(:pattern)).to eq(pattern)
    end

    it "assigns lists for categories and subcategories" do
      subcategory = FactoryGirl.create(:subcategory)
      pattern = FactoryGirl.create(:pattern, category: subcategory.category, subcategory: subcategory)
      get :edit, {:id => pattern.to_param}, valid_session
      expect(assigns(:categories)).to eq([subcategory.category])
      expect(assigns(:subcategories)).to eq([subcategory])
    end

    it "renders the :edit view" do
      pattern = FactoryGirl.create(:pattern)
      get :edit, {:id => pattern.to_param}, valid_session
      expect(response).to render_template(:edit)
    end

  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Pattern" do
        expect {
          post :create, {:pattern => build_attributes(:pattern)}, valid_session
        }.to change(Pattern, :count).by(1)
      end

      it "assigns a newly created pattern as @pattern" do
        post :create, {:pattern => build_attributes(:pattern)}, valid_session
        expect(assigns(:pattern)).to be_a(Pattern)
        expect(assigns(:pattern)).to be_persisted
      end

      it "redirects to the pattern index page" do
        post :create, {:pattern => build_attributes(:pattern)}, valid_session
        expect(response).to redirect_to(patterns_url)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved pattern as @pattern" do
        post :create, {:pattern => build_attributes(:pattern_invalid)}, valid_session
        expect(assigns(:pattern)).to be_a_new(Pattern)
      end

      it "re-renders the 'new' template" do
        post :create, {:pattern => build_attributes(:pattern_invalid)}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    context "with valid params" do

      it "updates the requested pattern" do
        pattern = FactoryGirl.create(:pattern)
        new_subcategory = FactoryGirl.create(:subcategory)
        new_category = new_subcategory.category
        put :update, {:id => pattern.to_param, :pattern => {
                  match_text: "New Text",
                  notes: "New Note",
                  category_id: new_category.id,
                  subcategory_id: new_subcategory.id }}, valid_session
        pattern.reload
        expect(pattern.match_text).to eq("New Text")
        expect(pattern.notes).to eq("New Note")
        expect(pattern.category).to eq(new_category)
        expect(pattern.subcategory).to eq(new_subcategory)
      end

      it "redirects to the patterns index page" do
        pattern = FactoryGirl.create(:pattern)
        put :update, {:id => pattern.to_param, :pattern => build_attributes(:pattern)}, valid_session
        expect(response).to redirect_to(patterns_url)
      end
    end

    context "with invalid params" do
      it "assigns the pattern as @pattern" do
        pattern = FactoryGirl.create(:pattern)
        put :update, {:id => pattern.to_param, :pattern => build_attributes(:pattern_invalid)}, valid_session
        expect(assigns(:pattern)).to eq(pattern)
      end

      it "re-renders the 'edit' template" do
        pattern = FactoryGirl.create(:pattern)
        put :update, {:id => pattern.to_param, :pattern => build_attributes(:pattern_invalid)}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested pattern" do
      pattern = FactoryGirl.create(:pattern)
      expect {
        delete :destroy, {:id => pattern.to_param}, valid_session
      }.to change(Pattern, :count).by(-1)
    end

    it "redirects to the patterns list" do
      pattern = FactoryGirl.create(:pattern)
      delete :destroy, {:id => pattern.to_param}, valid_session
      expect(response).to redirect_to(patterns_url)
    end
  end

end
