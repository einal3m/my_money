require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe DateRangeOptionsController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # DateRangeOption. As you add validations to DateRangeOption, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    FactoryGirl.attributes_for(:date_range_option)
  }

  let(:invalid_attributes) {
    FactoryGirl.attributes_for(:date_range_option, klass: nil)
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # DateRangeOptionsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all date_range_options as @date_range_options" do
      date_range_option = FactoryGirl.create(:date_range_option)
      get :index, {}, valid_session
      expect(assigns(:date_range_options)).to eq([date_range_option])
    end

    it "assigns a new date_range_option as @date_range_option" do
      get :index, {}, valid_session
      expect(assigns(:date_range_option)).to be_a_new(DateRangeOption)
    end

  end

  describe "GET edit" do
    it "assigns the requested date_range_option as @date_range_option" do
      date_range_option = DateRangeOption.create! valid_attributes
      get :edit, {:id => date_range_option.to_param}, valid_session
      expect(assigns(:date_range_option)).to eq(date_range_option)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new DateRangeOption" do
        expect {
          post :create, {:date_range_option => valid_attributes}, valid_session
        }.to change(DateRangeOption, :count).by(1)
      end

      it "redirects to the date_range_option index page" do
        post :create, {:date_range_option => valid_attributes}, valid_session
        expect(response).to redirect_to(date_range_options_url)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved date_range_option as @date_range_option" do
        post :create, {:date_range_option => invalid_attributes}, valid_session
        expect(assigns(:date_range_option)).to be_a_new(DateRangeOption)
      end

      it "redirects to the date range option index page" do
        post :create, {:date_range_option => invalid_attributes}, valid_session
        expect(response).to redirect_to(date_range_options_url)
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      let(:new_attributes) {
        FactoryGirl.attributes_for(:date_range_option, description: "Update Desc", klass: "Lib::CustomDateRange", default: true)
      }

      it "updates the requested date_range_option" do
        dro1 = DateRangeOption.create! valid_attributes
        date_range_option = DateRangeOption.create! valid_attributes
        put :update, {:id => date_range_option.to_param, :date_range_option => new_attributes}, valid_session
        dro1.reload
        date_range_option.reload

        expect(date_range_option.description).to eq("Update Desc")
        expect(date_range_option.klass).to eq("Lib::CustomDateRange")
        expect(date_range_option.default).to be_truthy
        expect(dro1.default).to be_falsey
      end

      it "redirects to the date_range_option index page" do
        date_range_option = DateRangeOption.create! valid_attributes
        put :update, {:id => date_range_option.to_param, :date_range_option => valid_attributes}, valid_session
        expect(response).to redirect_to(date_range_options_url)
      end
    end

    describe "with invalid params" do
      it "assigns the date_range_option as @date_range_option" do
        date_range_option = DateRangeOption.create! valid_attributes
        put :update, {:id => date_range_option.to_param, :date_range_option => invalid_attributes}, valid_session
        expect(assigns(:date_range_option)).to eq(date_range_option)
      end

      it "re-renders the 'edit' template" do
        date_range_option = DateRangeOption.create! valid_attributes
        put :update, {:id => date_range_option.to_param, :date_range_option => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested date_range_option" do
      date_range_option = DateRangeOption.create! valid_attributes
      expect {
        delete :destroy, {:id => date_range_option.to_param}, valid_session
      }.to change(DateRangeOption, :count).by(-1)
    end

    it "redirects to the date_range_options list" do
      date_range_option = DateRangeOption.create! valid_attributes
      delete :destroy, {:id => date_range_option.to_param}, valid_session
      expect(response).to redirect_to(date_range_options_url)
    end

    it "removes date range option from session if deleted" do
      date_range_option = DateRangeOption.create! valid_attributes
      session[:date_range_option_id] = date_range_option.id
      delete :destroy, {:id => date_range_option.to_param}, valid_session

      expect(session[:date_range_option_id]).to be_nil
    end

    it "leaves session unchanged if different date range option deleted" do
      date_range_option1 = DateRangeOption.create! valid_attributes
      date_range_option2 = DateRangeOption.create! valid_attributes
      session[:date_range_option_id] = date_range_option1.id
      delete :destroy, {:id => date_range_option2.to_param}

      expect(session[:date_range_option_id]).to eq(date_range_option1.id)
    end
  end

end
