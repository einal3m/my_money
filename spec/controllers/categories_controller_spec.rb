require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe CategoriesController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # Category. As you add validations to Category, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    FactoryGirl.attributes_for(:category)
  }

  let(:invalid_attributes) {
    FactoryGirl.attributes_for(:category_invalid)
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # CategoriesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do

    it "assigns all categories as @income_categories and @expense_categories" do
      category1 = FactoryGirl.create(:category, category_type: FactoryGirl.create(:category_type, name: "Income"))
      category2 = FactoryGirl.create(:category, category_type: FactoryGirl.create(:category_type, name: "Expense"))
      get :index, {}, valid_session
      expect(assigns(:income_categories)).to eq([category1])
      expect(assigns(:expense_categories)).to eq([category2])
    end

    it "renders the :index view" do
      FactoryGirl.create(:category_type, name: "Income")
      FactoryGirl.create(:category_type, name: "Expense")
      get :index, {}, valid_session
      expect(response).to render_template("index")
    end

  end

  describe "GET show" do
    it "redirects to the index page" do
      category = FactoryGirl.create(:category)
      get :show, {:id => category.to_param}, valid_session
      expect(response).to redirect_to(categories_url)
    end
  end

  describe "GET new" do
    it "assigns a new category as @category" do
      get :new, {}, valid_session
      expect(assigns(:category)).to be_a_new(Category)
    end

    it "assigns category types as @category_types" do
      category_types = FactoryGirl.create(:category_type)
      get :new, {}, valid_session
      expect(assigns(:category_types)).to eq([category_types])
    end

    it "renders the :new view" do
      get :new, {}, valid_session
      expect(response).to render_template("new")
    end

  end

  describe "GET edit" do

    it "assigns the requested category as @category" do
      category = FactoryGirl.create(:category)
      get :edit, {:id => category.to_param}, valid_session
      expect(assigns(:category)).to eq(category)
    end

    it "assigns category types as @category_types" do
      category = FactoryGirl.create(:category)
      get :edit, {:id => category.to_param}, valid_session
      expect(assigns(:category_types)).to eq([category.category_type])
    end

    it "renders the :edit view" do
      category = FactoryGirl.create(:category)
      get :edit, {:id => category.to_param}, valid_session
      expect(response).to render_template("edit")
    end

  end

  describe "POST create" do

    context "with valid params" do

      it "creates a new Category" do
        expect {
          post :create, {:category => build_attributes(:category)}, valid_session
        }.to change(Category, :count).by(1)
      end

      it "redirects back to the index page" do
        post :create, {:category => build_attributes(:category)}, valid_session
        expect(response).to redirect_to(categories_url)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved category as @category" do
        post :create, {:category => build_attributes(:category_invalid)}, valid_session
        expect(assigns(:category)).to be_a_new(Category)
      end

      it "re-renders the 'new' template" do
        post :create, {:category => build_attributes(:category_invalid)}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do

      it "updates the requested category" do
        category = FactoryGirl.create(:category)
        new_category_type = FactoryGirl.create(:category_type)
        put :update, {:id => category.to_param, 
          :category => build_attributes(:category,
              name: "New Name",
              category_type: new_category_type)}, valid_session
        category.reload
        expect(category.name).to eq("New Name")
        expect(category.category_type).to eq(new_category_type)
      end

      it "redirects to the categories index page" do
        category = FactoryGirl.create(:category)
        put :update, {:id => category.to_param, :category => build_attributes(:category)}, valid_session
        expect(response).to redirect_to(categories_url)
      end
    end

    describe "with invalid params" do
      it "assigns the category as @category" do
        category = FactoryGirl.create(:category)
        put :update, {:id => category.to_param, :category => build_attributes(:category_invalid)}, valid_session
        expect(assigns(:category)).to eq(category)
      end

      it "re-renders the 'edit' template" do
        category = FactoryGirl.create(:category)
        put :update, {:id => category.to_param, :category => build_attributes(:category_invalid)}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested category" do
      category = FactoryGirl.create(:category)
      expect {
        delete :destroy, {:id => category.to_param}, valid_session
      }.to change(Category, :count).by(-1)
    end

    it "redirects to the categories list" do
      category = FactoryGirl.create(:category)
      delete :destroy, {:id => category.to_param}, valid_session
      expect(response).to redirect_to(categories_url)
    end
  end

  describe "subcategories_by_category" do

    it "assigns the subcategories of category_id as @subcategories" do
      category1 = FactoryGirl.create(:category)
      category2 = FactoryGirl.create(:category)
      xhr :post, :subcategories_by_category, {:category_id => category1.to_param, :format => "js"}
      expect(assigns(:subcategories)).to eq(category1.subcategories)
    end

    it "assigns an empty @subcategories array if no category is specified" do
      xhr :post, :subcategories_by_category, {:format => "js"}
      expect(assigns(:subcategories)).to eq([])
    end
  end

end
