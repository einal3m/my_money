require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe SubcategoriesController, :type => :controller do


  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # SubcategoriesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "redirects to category index" do
      get :index, {}, valid_session
      expect(response).to redirect_to(categories_url)
    end
  end

  describe "GET show" do
    it "redirects to category index" do
      subcategory = FactoryGirl.create(:subcategory)
      get :show, {:id => subcategory.to_param}, valid_session
      expect(response).to redirect_to(categories_url)
    end
  end

  describe "GET new" do
    it "assigns a new subcategory as @subcategory" do
      category = FactoryGirl.create(:category)
      get :new, {:category_id => category.id}, valid_session
      expect(assigns(:subcategory)).to be_a_new(Subcategory)
    end

    it "assigns the current category to subcategory" do
      category = FactoryGirl.create(:category)
      get :new, {:category_id => category.id}, valid_session
      expect(assigns(:subcategory).category).to eq(category)
    end

    it "renders the :new view" do
      category = FactoryGirl.create(:category)
      get :new, {:category_id => category.id}, valid_session
      expect(response).to render_template(:new)
    end

    it "redirects to category index if category not specified" do
      get :new, {}, valid_session
      expect(response).to redirect_to(categories_url)
    end

  end

  describe "GET edit" do
    it "assigns the requested subcategory as @subcategory" do
      subcategory = FactoryGirl.create(:subcategory)
      get :edit, {:id => subcategory.to_param}, valid_session
      expect(assigns(:subcategory)).to eq(subcategory)
    end

    it "renders the :edit view" do
      subcategory = FactoryGirl.create(:subcategory)
      get :edit, {:id => subcategory.to_param}, valid_session
      expect(response).to render_template(:edit)
    end
  end

  describe "POST create" do
    context "with valid params" do
      it "creates a new Subcategory" do
        expect {
          post :create, {:subcategory => build_attributes(:subcategory)}, valid_session
        }.to change(Subcategory, :count).by(1)
      end

      it "assigns a newly created subcategory as @subcategory" do
        post :create, {:subcategory => build_attributes(:subcategory)}, valid_session
        expect(assigns(:subcategory)).to be_a(Subcategory)
        expect(assigns(:subcategory)).to be_persisted
      end

      it "redirects to the categories index" do
        post :create, {:subcategory => build_attributes(:subcategory)}, valid_session
        expect(response).to redirect_to(categories_url)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved subcategory as @subcategory" do
        post :create, {:subcategory => build_attributes(:subcategory_invalid)}, valid_session
        expect(assigns(:subcategory)).to be_a_new(Subcategory)
      end

      it "re-renders the 'new' template" do
        post :create, {:subcategory => build_attributes(:subcategory_invalid)}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      let(:new_attributes) {
        {:name => "Update Name"}
      }

      it "updates the requested subcategory" do
        subcategory = FactoryGirl.create(:subcategory)
        put :update, {:id => subcategory.to_param, :subcategory => new_attributes}, valid_session
        subcategory.reload
        expect(subcategory.name).to eq("Update Name")
      end

      it "redirects to the categories_url" do
        subcategory = FactoryGirl.create(:subcategory)
        put :update, {:id => subcategory.to_param, :subcategory => new_attributes}, valid_session
        expect(response).to redirect_to(categories_url)
      end
    end

    describe "with invalid params" do
      it "assigns the subcategory as @subcategory" do
        subcategory = FactoryGirl.create(:subcategory)
        put :update, {:id => subcategory.to_param, :subcategory => {:name => nil}}, valid_session
        expect(assigns(:subcategory)).to eq(subcategory)
      end

      it "re-renders the 'edit' template" do
        subcategory = FactoryGirl.create(:subcategory)
        put :update, {:id => subcategory.to_param, :subcategory => {:name => nil}}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested subcategory" do
      subcategory = FactoryGirl.create(:subcategory)
      expect {
        delete :destroy, {:id => subcategory.to_param}, valid_session
      }.to change(Subcategory, :count).by(-1)
    end

    it "redirects to the subcategories list" do
      subcategory = FactoryGirl.create(:subcategory)
      delete :destroy, {:id => subcategory.to_param}, valid_session
      expect(response).to redirect_to(categories_url)
    end
  end

end
