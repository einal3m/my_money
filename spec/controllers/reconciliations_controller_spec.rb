require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ReconciliationsController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # Reconciliation. As you add validations to Reconciliation, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    FactoryGirl.attributes_for(:reconciliation)
  }

  let(:invalid_attributes) {
    FactoryGirl.attributes_for(:reconciliation_invalid)
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ReconciliationsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all reconciliations as @reconciliations" do
      reconciliation = FactoryGirl.create(:reconciliation)
      get :index, {}, valid_session
      expect(assigns(:reconciliations)).to eq([reconciliation])
    end

    it "renders the :index view" do
      get :index, {}, valid_session
      expect(response).to render_template("index")
    end

  end

  describe "GET show" do
    it "assigns the requested reconciliation as @reconciliation" do
      reconciliation = FactoryGirl.create(:reconciliation)
      get :show, {:id => reconciliation.to_param}, valid_session
      expect(assigns(:reconciliation)).to eq(reconciliation)
    end

    it "renders the :show view" do
      reconciliation = FactoryGirl.create(:reconciliation)
      get :show, {:id => reconciliation.to_param}, valid_session
      expect(response).to render_template("show")
    end

  end

  describe "GET new" do
    it "assigns a new reconciliation as @reconciliation" do
      account = FactoryGirl.create(:account)
      get :new, {}, valid_session
      expect(assigns(:reconciliation)).to be_a_new(Reconciliation)
      expect(assigns(:accounts)).to eq([account])
    end

    it "assigns a list of accounts as @accounts" do
      account1 = FactoryGirl.create(:account)
      account2 = FactoryGirl.create(:account)
      get :new, {}, valid_session
      expect(assigns(:accounts)).to eq([account1, account2])
    end

    it "renders the :new view" do
      get :new, {}, valid_session
      expect(response).to render_template("new")
    end
  end

  describe "GET edit" do
    it "assigns the requested reconciliation as @reconciliation" do
      reconciliation = FactoryGirl.create(:reconciliation)
      get :edit, {:id => reconciliation.to_param}, valid_session
      expect(assigns(:reconciliation)).to eq(reconciliation)
    end

    it "assigns a list of accounts as @accounts" do
      reconciliation = FactoryGirl.create(:reconciliation)
      account1 = FactoryGirl.create(:account)
      account2 = FactoryGirl.create(:account)
      get :edit, {:id => reconciliation.to_param}, valid_session
      expect(assigns(:accounts)).to eq([reconciliation.account, account1, account2])
    end

    it "renders the :edit view" do
      reconciliation = FactoryGirl.create(:reconciliation)
      get :edit, {:id => reconciliation.to_param}, valid_session
      expect(response).to render_template("edit")
    end

  end

  describe "POST create" do
    context "with valid params" do
      it "creates a new Reconciliation" do
        expect {
          post :create, {:reconciliation => build_attributes(:reconciliation)}, valid_session
        }.to change(Reconciliation, :count).by(1)
      end

      it "assigns a newly created reconciliation as @reconciliation" do
        post :create, {:reconciliation => build_attributes(:reconciliation)}, valid_session
        expect(assigns(:reconciliation)).to be_a(Reconciliation)
        expect(assigns(:reconciliation)).to be_persisted
      end

      it "redirects to the transaction reconciliation list" do
        post :create, {:reconciliation => build_attributes(:reconciliation)}, valid_session
        expect(response).to redirect_to(reconciliations_transactions_path(assigns(:reconciliation)))
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved reconciliation as @reconciliation" do
        post :create, {:reconciliation => build_attributes(:reconciliation_invalid)}, valid_session
        expect(assigns(:reconciliation)).to be_a_new(Reconciliation)
      end

      it "re-renders the 'new' template" do
        post :create, {:reconciliation => build_attributes(:reconciliation_invalid)}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do

    before :each do
      @reconciliation = FactoryGirl.create(:reconciliation)
    end

    context "with valid params" do

      it "updates the requested reconciliation" do
        account = FactoryGirl.create(:account)
        put :update, {:id => @reconciliation.to_param, 
          :reconciliation => build_attributes(:reconciliation,
              statement_balance: "9.77",
              statement_date: "2014-07-02",
              account: account)}, valid_session
        @reconciliation.reload
        expect(@reconciliation.account_id).to eq(account.id)
        expect(@reconciliation.statement_date).to eq(Date.parse("2014-07-02"))
        expect(@reconciliation.statement_balance).to eq(9.77)
      end

      it "assigns the requested reconciliation as @reconciliation" do
        put :update, {:id => @reconciliation.to_param, :reconciliation => build_attributes(:reconciliation)}, valid_session
        expect(assigns(:reconciliation)).to eq(@reconciliation)
      end

      it "redirects to the reconciliation" do
        put :update, {:id => @reconciliation.to_param, :reconciliation => build_attributes(:reconciliation)}, valid_session
        expect(response).to redirect_to(reconciliations_transactions_path(assigns(:reconciliation)))
      end
    end

    context "with invalid params" do
      it "assigns the reconciliation as @reconciliation" do
        put :update, {:id => @reconciliation.to_param, :reconciliation => build_attributes(:reconciliation_invalid)}, valid_session
        expect(assigns(:reconciliation)).to eq(@reconciliation)
      end

      it "re-renders the 'edit' template" do
        put :update, {:id => @reconciliation.to_param, :reconciliation => build_attributes(:reconciliation_invalid)}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    before :each do
      @reconciliation = FactoryGirl.create(:reconciliation)
    end

    it "destroys the requested reconciliation" do
      expect {
        delete :destroy, {:id => @reconciliation.to_param}, valid_session
      }.to change(Reconciliation, :count).by(-1)
    end

    it "redirects to the reconciliations list" do
      delete :destroy, {:id => @reconciliation.to_param}, valid_session
      expect(response).to redirect_to(reconciliations_url)
    end
  end

  describe "transactions" do
    before :each do
      @reconciliation = FactoryGirl.create(:reconciliation)
    end

    it "assigns the reconciliation as @reconciliation" do
      get :transactions, {:id => @reconciliation.to_param}, valid_session
      expect(assigns(:reconciliation)).to eq(@reconciliation)
    end

    it "assigns a list of transactions as @transactions" do

      transaction1 = FactoryGirl.create(:transaction, account: @reconciliation.account, reconciliation: nil)
      transaction2 = FactoryGirl.create(:transaction, account: @reconciliation.account, reconciliation: nil)
      
      get :transactions, {:id => @reconciliation.to_param}, valid_session
      expect(assigns(:transactions)).to eq([transaction1, transaction2])
    end

    it "renders the :transactions view" do
      get :transactions, {:id => @reconciliation.to_param}, valid_session
      expect(response).to render_template("transactions")
    end

  end

  describe "reconcile" do
    before :each do
      @reconciliation = FactoryGirl.create(:reconciliation)
      @transaction1 = FactoryGirl.create(:transaction, account: @reconciliation.account, reconciliation: nil)
      @transaction2 = FactoryGirl.create(:transaction, account: @reconciliation.account, reconciliation: nil)
    end

    it "updates reconciliation reconciled" do
      get :reconcile, {:id => @reconciliation.to_param,
          :transactions => [{"id"=>@transaction1.id, "add_to_reconciliation"=>"1"},
                            {"id"=>@transaction2.id, "add_to_reconciliation"=>"0"}]}
      @reconciliation.reload

      expect(@reconciliation.reconciled).to be_truthy
    end

    it "updates reconciliation on transactions" do
      get :reconcile, {:id => @reconciliation.to_param,
            :transactions => [{"id"=>@transaction1.id, "add_to_reconciliation"=>"1"},
                            {"id"=>@transaction2.id, "add_to_reconciliation"=>"0"}]}
      @transaction1.reload
      @transaction2.reload
      @reconciliation.reload

      expect(@transaction1.reconciliation).to eq(@reconciliation)
      expect(@transaction2.reconciliation).to eq(nil)
    end

    it "redirects to the reconciliation show page" do
      get :reconcile, {:id => @reconciliation.to_param,
            :transactions => [{"id"=>@transaction1.id, "add_to_reconciliation"=>"1"},
                            {"id"=>@transaction2.id, "add_to_reconciliation"=>"0"}]}
      expect(response).to redirect_to(transactions_url)
    end

  end
end
