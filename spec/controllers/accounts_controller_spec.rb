require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe AccountsController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # Account. As you add validations to Account, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    FactoryGirl.attributes_for(:account)
  }

  let(:invalid_attributes) {
    FactoryGirl.attributes_for(:account_invalid)
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # AccountsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all accounts as @accounts" do
      account = FactoryGirl.create(:account)
      get :index, {}, valid_session
      expect(assigns(:accounts)).to eq([account])
    end

    it "renders the :index view" do
      get :index, {}, valid_session
      expect(response).to render_template("index")
    end
  end

  describe "GET show" do
    it "assigns the requested account as @account" do
      account = FactoryGirl.create(:account)
      get :show, {:id => account.to_param}, valid_session
      expect(assigns(:account)).to eq(account)
    end

    it "renders the :show view" do
      account = FactoryGirl.create(:account)
      get :show, {:id => account.to_param}, valid_session
      expect(response).to render_template("show")
    end
  end

  describe "GET new" do
    it "assigns a new account as @account" do
      get :new, {}, valid_session
      expect(assigns(:account)).to be_a_new(Account)
    end

    it "renders the :new view" do
      get :new, {}, valid_session
      expect(response).to render_template("new")
    end
  end

  describe "GET edit" do
    it "assigns the requested account as @account" do
      account = FactoryGirl.create(:account)
      get :edit, {:id => account.to_param}, valid_session
      expect(assigns(:account)).to eq(account)
    end

    it "renders the :edit view" do
      account = FactoryGirl.create(:account)
      get :edit, {:id => account.to_param}, valid_session
      expect(response).to render_template("edit")
    end
  end

  describe "POST create" do
    context "with valid params" do
      it "creates a new Account" do
        expect {
          post :create, {:account => FactoryGirl.attributes_for(:account)}, valid_session
        }.to change(Account, :count).by(1)
      end

      it "assigns a newly created account as @account" do
        post :create, {:account => FactoryGirl.attributes_for(:account)}, valid_session
        expect(assigns(:account)).to be_a(Account)
        expect(assigns(:account)).to be_persisted
      end

      it "redirects to the account index" do
        post :create, {:account => FactoryGirl.attributes_for(:account)}, valid_session
        expect(response).to redirect_to(accounts_url)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved account as @account" do
        post :create, {:account => FactoryGirl.attributes_for(:account_invalid)}, valid_session
        expect(assigns(:account)).to be_a_new(Account)
      end

      it "re-renders the 'new' template" do
        post :create, {:account => FactoryGirl.attributes_for(:account_invalid)}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do

    before :each do
      @account = FactoryGirl.create(:account)
    end

    context "with valid params" do

      it "updates the requested account" do
        put :update, {:id => @account.to_param, 
          :account => FactoryGirl.attributes_for(:account,
            name: "New Account2",
            bank: "New Bank2",
            starting_balance: 8.88,
            starting_date: "2014-02-02")}, valid_session

        @account.reload
        expect(@account.name).to eq("New Account2")
        expect(@account.bank).to eq("New Bank2")
        expect(@account.starting_balance).to eq(8.88)
        expect(@account.starting_date).to eq(Date.parse("2014-02-02"))
      end

      it "assigns the requested account as @account" do
        put :update, {:id => @account.to_param, :account => FactoryGirl.attributes_for(:account)}, valid_session
        expect(assigns(:account)).to eq(@account)
      end

      it "redirects to the account" do
        put :update, {:id => @account.to_param, :account =>  FactoryGirl.attributes_for(:account)}, valid_session
        expect(response).to redirect_to(accounts_url)
      end
    end

    context "with invalid params" do
      it "assigns the account as @account" do
        put :update, {:id => @account.to_param, :account => FactoryGirl.attributes_for(:account_invalid)}, valid_session
        expect(assigns(:account)).to eq(@account)
      end

      it "re-renders the 'edit' template" do
        put :update, {:id => @account.to_param, :account => FactoryGirl.attributes_for(:account_invalid)}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do

    before :each do
      @account = FactoryGirl.create(:account)
    end

    it "destroys the requested account" do
      expect {
        delete :destroy, {:id => @account.to_param}, valid_session
      }.to change(Account, :count).by(-1)
    end

    it "redirects to the accounts list" do
      delete :destroy, {:id => @account.to_param}, valid_session
      expect(response).to redirect_to(accounts_url)
    end
  end

  describe "last_reconciliation" do

    context "never been reconciled" do
      before :each do
        @account = FactoryGirl.create(:account)
      end

      it "sets @last_date with last reconciled date" do
        xhr :post, :last_reconciliation, {:id => @account.to_param, :format => "js"}
        expect(assigns(:last_date)).to eq(@account.starting_date)
      end

      it "sets @last_balance with last reconciled balance" do
        xhr :post, :last_reconciliation, {:id => @account.to_param, :format => "js"}
        expect(assigns(:last_balance)).to eq(@account.starting_balance)
      end
    end

    context "has been reconciled" do
      before :each do
        @account = FactoryGirl.create(:account)
        @reconciliation = FactoryGirl.create(:reconciliation, account: @account)
      end

      it "sets @last_date with account starting date" do
        xhr :post, :last_reconciliation, {:id => @account.to_param, :format => "js"}
        expect(assigns(:last_date)).to eq(@reconciliation.statement_date)
      end

      it "sets @last_balance with account starting balance" do
        xhr :post, :last_reconciliation, {:id => @account.to_param, :format => "js"}
        expect(assigns(:last_balance)).to eq(@reconciliation.statement_balance)
      end
    end

    it "renders the last_reconciliation view" do
      account = FactoryGirl.create(:account)
      xhr :post, :last_reconciliation, {:id => account.to_param, :format => "js"}

      expect(response).to render_template("last_reconciliation")
    end

  end

end
